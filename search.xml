<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Nginx配合Tomcat对单体web项目集群部署配置</title>
    <url>/2021/01/17/Nginx%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>本文主要介绍如何使用Nginx对单体web引用进行集群部署！</p>
<a id="more"></a>

<h3 id="一、下载Nginx服务器"><a href="#一、下载Nginx服务器" class="headerlink" title="一、下载Nginx服务器"></a>一、下载Nginx服务器</h3><p>下载地址：<a href="http://nginx.org/">http://nginx.org/</a></p>
<p>在此地址下面选择稳定版本的Nginx下载到本地，解压出来</p>
<p><img src="http://qiniu.zhahongsheng.top//image/image-20210111192526668.png" alt="image-20210111192526668"></p>
<p><img src="http://qiniu.zhahongsheng.top//image/image-20210111193114761.png" alt="image-20210111193114761"></p>
<h3 id="二、测试Nginx服务"><a href="#二、测试Nginx服务" class="headerlink" title="二、测试Nginx服务"></a>二、测试Nginx服务</h3><p>解压好Nginx后直接双机Nginx.exe文件，启动Nginx，在浏览器中输入localhost，如果出现以下页面则证明Nginx已经成功启动。</p>
<p><img src="http://qiniu.zhahongsheng.top//image/image-20210111195645028.png" alt="image-20210111195645028"></p>
<h3 id="三、修改Nginx配置文件"><a href="#三、修改Nginx配置文件" class="headerlink" title="三、修改Nginx配置文件"></a>三、修改Nginx配置文件</h3><p>修改Nginx中conf文件下的nginx.conf文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据服务器性能进行权重设置</span><br><span class="line">    upstream wgf.com&#123; </span><br><span class="line">        server 127.0.0.1:8090  weight&#x3D;3;    #真实服务器A(sxwgf-PC)</span><br><span class="line">        server 127.0.0.1:8091  weight&#x3D;1;    #真实服务器B(sxwgf-PC)</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>首先在http下面添加集群部署配置文件，如上面代码所示，如果有多个不同的web服务器，只需要将相关地址按照上面所示格式加进去即可 ，若是不同服务器性能不同，也可按照服务器的新能好坏，对对应的服务分配不同的权限，以均衡不同服务器的访问情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8088;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location &#x2F;C1-DM &#123;</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass  http:&#x2F;&#x2F;wgf.com; </span><br><span class="line">            proxy_redirect  default; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其次修改server部分的内容，此部分主要是针对Nginx的修改，Nginx的默认监听端口是80端口，如果想要修改为其他端口的话，自己修改好即可。其次在location里面修改Nginx的访问位置。集群部署的情况下，proxy_pass字段里面注意填写上面配置的集群的名字wgf.com。其他的可以不用做修改。</p>
<h3 id="四、Tomcat启动web应用"><a href="#四、Tomcat启动web应用" class="headerlink" title="四、Tomcat启动web应用"></a>四、Tomcat启动web应用</h3><p>若果是在同一个服务器下面需要启动多个Tomcat的话，则可直接将现有的Tomcat复制几份，修改Tomcat的文件名，便于区分。其次修改各个Tomcat的配置文件，防止端口冲突</p>
<p>修改Tomcat下面conf文件夹下的server.xml文件中的以下三个标签中port对应的数值，保证其对应的值在不同Tomcat下都不同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Server port&#x3D;&quot;8006&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Connector port&#x3D;&quot;8090&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br><span class="line">               </span><br><span class="line">&lt;Connector port&#x3D;&quot;8010&quot; protocol&#x3D;&quot;AJP&#x2F;1.3&quot; redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>若果是在不同服务系下面则不用修改。</p>
<p>做完以上操作后，启动Tomcat，先测试一下各个Tomcat下面下面启动的应用。</p>
<h3 id="五、重启Nginx服务"><a href="#五、重启Nginx服务" class="headerlink" title="五、重启Nginx服务"></a>五、重启Nginx服务</h3><p>在Nginx.exe文件所在的文件下，进入cmd，执行重启服务命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>重启完成后，在浏览器输入<a href="http://Nginx服务启动的地址：Nginx服务监听的端口/Tomcat下启动对应应用的应用名。">http://Nginx服务启动的地址：Nginx服务监听的端口/Tomcat下启动对应应用的应用名。</a></p>
<p>若看到应用页面正常启动，则代表部署完成。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2021/01/17/Nignx%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>本文主要介绍传统项目的项目周期，及项目周期中各个阶段的行为和新型项目的对比。</p>
<a id="more"></a>

<h3 id="1-传统项目生命周期"><a href="#1-传统项目生命周期" class="headerlink" title="1.传统项目生命周期"></a>1.传统项目生命周期</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.调研阶段</span><br><span class="line">2.设计阶段</span><br><span class="line">3.开发阶段</span><br><span class="line">4.测试阶段</span><br><span class="line">5.运营阶段</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">阶段</th>
<th align="center">目的</th>
<th align="center">人员</th>
<th align="center">节点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">调研阶段</td>
<td align="center">需求可行性</td>
<td align="center">产品经理</td>
<td align="center">角度、思路、方案，老板拍板</td>
</tr>
<tr>
<td align="center">设计阶段</td>
<td align="center">方案可视化</td>
<td align="center">产品团队主导，开发测试运维参与</td>
<td align="center">产品需求文档、项目里程碑</td>
</tr>
<tr>
<td align="center">开发阶段</td>
<td align="center">方案运行</td>
<td align="center">开发团队为主，运维团队参与</td>
<td align="center">阶段项目正常运行</td>
</tr>
<tr>
<td align="center">测试阶段</td>
<td align="center">保证功能完善</td>
<td align="center">运维、开发参与</td>
<td align="center">项目功能复合要求</td>
</tr>
<tr>
<td align="center">运营阶段</td>
<td align="center">项目部署维护</td>
<td align="center">运维团队为主，开发、产品团队参与</td>
<td align="center">项目终止，功能迭代</td>
</tr>
</tbody></table>
<h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ol>
<li>为项目提供了按阶段划分的检查点，当前阶段完成后，只需关注后续阶段。</li>
</ol>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol>
<li>开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加开发风险</li>
<li>突出缺点是不适应用户需求的变化</li>
</ol>
<h3 id="2-新型项目生命周期"><a href="#2-新型项目生命周期" class="headerlink" title="2.新型项目生命周期"></a>2.新型项目生命周期</h3><p>快速的实现一个产品所需的<strong>主要功能</strong>然后推向市场，根据用户的反馈和需求不停的对产品的功能进行迭代</p>
<p><img src="http://qiniu.zhahongsheng.top//image/image-20201225171608660.png" alt="image-20201225171608660"></p>
<h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ol>
<li>注重市场快速反应能力，也即具体应对能力，客户前期满意度高。</li>
</ol>
<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ol>
<li>注重人员的沟通，忽略文档的重要性，若项目人员流动太大，会给维护带来不少难度。</li>
<li>需要项目中存在禁言较强的人，否则大项目中容易遇到瓶颈问题</li>
</ol>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>传统项目生命周期：不适应用户需求的变化</li>
<li>新型项目生命周期：快速开发、进行迭代</li>
</ul>
<h3 id="项目开发环境"><a href="#项目开发环境" class="headerlink" title="项目开发环境"></a>项目开发环境</h3><p>在一个项目开发过程中一般会涉及到以下五个环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">个人开发环境：</span><br><span class="line">	工作人员：自己</span><br><span class="line">	工作平台：个人笔记本、公司配备的电脑</span><br><span class="line">	工作特点：环境是自己配置的，团队中额不同的个人环境可以不一样</span><br><span class="line">	工作内容：项目的子模块、子功能</span><br><span class="line">	完成标准：完成领导安排的内容</span><br><span class="line">	</span><br><span class="line">公司开发环境：</span><br><span class="line">	工作人员：开发团队</span><br><span class="line">	工作平台：公司内部服务器</span><br><span class="line">	工作特点：服务器环境和线上环境完全一致</span><br><span class="line">	工作内容：项目子模块间的功能联调</span><br><span class="line">	完成标准：项目阶段开发、测试完成</span><br><span class="line">	</span><br><span class="line">项目测试环境：</span><br><span class="line">	工作人员：测试团队</span><br><span class="line">	工作平台：公司内部服务器</span><br><span class="line">	工作特点：服务器环境和线上环境完全一致</span><br><span class="line">	工作内容：项目功能、非功能、探索等测试</span><br><span class="line">	完成标准：项目阶段功能正常运行</span><br><span class="line">	</span><br><span class="line">项目预发布环境：</span><br><span class="line">	工作人员：运维团队</span><br><span class="line">	工作平台：公司线上服务器组中的一台</span><br><span class="line">	工作特点：服务器环境和线上环境完全一致</span><br><span class="line">	工作内容：特殊功能测试（支付）、压力测试、安全测试</span><br><span class="line">	完成标准：项目阶段功能正常运行，最后一道防线</span><br><span class="line">	</span><br><span class="line">项目线上环境：</span><br><span class="line">	工作人员：运维团队</span><br><span class="line">	工作平台：公司线上服务器组</span><br><span class="line">	工作特点：标准线上服务器环境</span><br><span class="line">	工作内容：代码部署和维护</span><br><span class="line">	完成标准：项目正常运行</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.0</title>
    <url>/2021/01/17/SpringBoot2.0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>本文主要介绍SpringBoot、springcloud和</p>
<a id="more"></a>
<h2 id="SpringBoot引入"><a href="#SpringBoot引入" class="headerlink" title="SpringBoot引入"></a>SpringBoot引入</h2><h3 id="1-为什么要用SpringBoot"><a href="#1-为什么要用SpringBoot" class="headerlink" title="1 为什么要用SpringBoot"></a>1 为什么要用SpringBoot</h3><p>传统项目：整合SSH或者SSM，考虑配置文件、Jar冲突问题、整合起来繁琐</p>
<p>​        打包方式：打包成一个war放入Tomcatwebapp目录下进行执行</p>
<p>SpringBoot是一个快速开发框架，能够帮助我们快速整合第三方框架（Maven依赖关系##Maven继承），<strong>完全采用注解化</strong>，简化XML配置。内置嵌入Http服务器（Tomcat、Jetty），默认嵌入Tomcat服务器。<strong>最终Java应用程序进行执行。</strong></p>
<p>核心：第三方框架</p>
<p>​    原理（Maven依赖关系##Maven继承）</p>
<p>​    完全采用注解化，在Spring3.0之后采用注解方式启动SpringMVC、内置嵌入Http服务器、Java 创建Tomcat</p>
<h3 id="2-SpringBoot与SpringCloud关系"><a href="#2-SpringBoot与SpringCloud关系" class="headerlink" title="2 SpringBoot与SpringCloud关系"></a>2 SpringBoot与SpringCloud关系</h3><ol>
<li>SpringBoot其实就是一个快速开发框架，能够帮助我们快速整合<strong>（第三方常用框架），完全采用注解化、简化XML配置、最终以Java应用程序进行执行。</strong></li>
<li>SpringCloud是一套<strong>目前</strong>完整微服务框架，功能非常强大。注册中心、客户端调用工具、服务治理（负载均衡、断路器、<strong>分布式配置中心。网关、服务链路等</strong>）、</li>
<li>SpringBoot不是微服务框架</li>
</ol>
<p>微服务通讯技术Http+json（restful）轻量级</p>
<p>SpringBoot：Web组件默认集成SpringMVC，SpringCloud依赖于SpringBoot实现微服务，使用SpringMVC编写服务接口</p>
<p>微服务开发：RPC远程通讯技术、服务治理</p>
<p>核心区别：SpringCloud 微服务框架，单纯的知识集成Springboot实现快速开发</p>
<h3 id="3-SpringBoot与SpringMVC关系"><a href="#3-SpringBoot与SpringMVC关系" class="headerlink" title="3 SpringBoot与SpringMVC关系"></a>3 SpringBoot与SpringMVC关系</h3><ol>
<li>SpringBoot Web组件集成SpringMVC框架，但是SpringBoot启动SpringMVC的时候没有传统配置文件，那么是如何启动的？</li>
<li>SpringMVC3.0之后支持注解方式启动SpringMVC（使用Java代码启动SpringMVC）</li>
<li>SpringBoot十一个快速开发框架，帮助我们快速的整合第三方常用使用框架（Maven集成方式），完全采用注解化（使用注解方式启动SpringMVC），简化XML，内置Http服务器（Tomcat、Jetty）、<strong>最终是以Java应用程序执行。</strong></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java导出数据到Excel</title>
    <url>/2021/01/17/%E4%BD%BF%E7%94%A8Java%E5%AF%BC%E5%87%BAExcel/</url>
    <content><![CDATA[<p>本文主要介绍使用Java导出数据到excel事需要注意的问题，以及Java导出excel常用的方法。</p>
<a id="more"></a>

<h3 id="一、excel数据导出限制"><a href="#一、excel数据导出限制" class="headerlink" title="一、excel数据导出限制"></a>一、excel数据导出限制</h3><ol>
<li>Excel 2003及以下的版本。一张表最大支持<strong>65536</strong>行数据，256列。也就是说excel2003完全不可能满足百万数据导出的需求。</li>
<li>Excel 2007-2010版本。一张表最大支持<strong>1048576</strong>行，16384列；</li>
<li>在针对超过1048576的数据量的数据导出的时候，就不能简单的导出到Excel的单个sheet页中了，必须得采用程序拆分的方式将数据存放到不同的sheet中，如下图所示：</li>
</ol>
<p><img src="http://qiniu.zhahongsheng.top//image/image-20210120203429998.png" alt="image-20210120203429998"></p>
<p>在对一个sheet表中存储数据超过一定数据量的时候，将剩下的数据存放在一个新的sheet页中。</p>
<h3 id="二、HSSFworkbook-XSSFworkbook-SXSSFworkbook区别"><a href="#二、HSSFworkbook-XSSFworkbook-SXSSFworkbook区别" class="headerlink" title="二、HSSFworkbook,XSSFworkbook,SXSSFworkbook区别"></a>二、HSSFworkbook,XSSFworkbook,SXSSFworkbook区别</h3><h4 id="HSSFworkbook"><a href="#HSSFworkbook" class="headerlink" title="HSSFworkbook"></a>HSSFworkbook</h4><p>是操作Excel2003以前（包括2003）的版本，扩展名是.xls；</p>
<p>poi导出excel最常用的方式；但是此种方式的局限就是导出的行数至多为65535行，超出65536条后系统就会报错。此方式因为行数不足七万行所以一般不会发生内存不足的情况（OOM）</p>
<h4 id="XSSFWorkbook"><a href="#XSSFWorkbook" class="headerlink" title="XSSFWorkbook"></a>XSSFWorkbook</h4><p>是操作Excel2007后的版本，扩展名是.xlsx；</p>
<p>这种形式的出现是为了突破HSSFWorkbook的65535行局限。其对应的是excel2007(1048576行，16384列)扩展名为“.xlsx”，最多可以导出104万行，不过这样就伴随着一个问题—OOM内存溢出，原因是你所创建的book sheet row cell等此时是存在内存的并没有持久化。</p>
<h4 id="SXSSFWorkbook"><a href="#SXSSFWorkbook" class="headerlink" title="SXSSFWorkbook"></a>SXSSFWorkbook</h4><p>是操作Excel2007后的版本，扩展名是.xlsx；</p>
<p>从POI 3.8版本开始，提供了一种基于XSSF的低内存占用的SXSSF方式。对于大型excel文件的创建，一个关键问题就是，要确保不会内存溢出。其实，就算生成很小的excel（比如几Mb），它用掉的内存是远大于excel文件实际的size的。如果单元格还有各种格式（比如，加粗，背景标红之类的），那它占用的内存就更多了。对于大型excel的创建且不会内存溢出的，就只有SXSSFWorkbook了。它的原理很简单，用硬盘空间换内存（就像hash map用空间换时间一样）。</p>
<p>SXSSFWorkbook是streaming版本的XSSFWorkbook,它只会保存最新的excel rows在内存里供查看，在此之前的excel rows都会被写入到硬盘里（Windows电脑的话，是写入到C盘根目录下的temp文件夹）。被写入到硬盘里的rows是不可见的/不可访问的。只有还保存在内存里的才可以被访问到。</p>
<p> SXSSF与XSSF的对比：</p>
<ol>
<li>在一个时间点上，只可以访问一定数量的数据</li>
<li>不再支持Sheet.clone()</li>
<li>不再支持公式的求值</li>
<li>在使用Excel模板下载数据时将不能动态改变表头，因为这种方式已经提前把excel写到硬盘的了就不能再改了</li>
<li>针对于大数据量的情况下使用SXSSF导出比XSSF导出效率要高得多。</li>
</ol>
<h3 id="三、SXSSFWorkbook导出excel示例"><a href="#三、SXSSFWorkbook导出excel示例" class="headerlink" title="三、SXSSFWorkbook导出excel示例"></a>三、SXSSFWorkbook导出excel示例</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--poi-ooxml--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>编写SxssfWorkbookUtil</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.yuanian.common.utils;</span><br><span class="line"></span><br><span class="line">import org.apache.poi.ss.usermodel.*;</span><br><span class="line">import org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line">import org.apache.poi.xssf.streaming.SXSSFWorkbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.*;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author zhahsh</span><br><span class="line"> * @date 2021&#x2F;1&#x2F;20</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SxssfWorkbookUtil &#123;</span><br><span class="line">    public static XSSFCellStyle headCellStyle;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置单元格样式1</span><br><span class="line">     * @param sxssfWorkbook 工作簿</span><br><span class="line">     * @return 单元格样式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static XSSFCellStyle getAndSetXSSFCellStyleOne(SXSSFWorkbook sxssfWorkbook) &#123;</span><br><span class="line">        XSSFCellStyle xssfCellStyle &#x3D; (XSSFCellStyle) sxssfWorkbook.createCellStyle();</span><br><span class="line">        XSSFDataFormat format &#x3D; (XSSFDataFormat) sxssfWorkbook.createDataFormat();</span><br><span class="line">        &#x2F;&#x2F; 是否自动换行</span><br><span class="line">        xssfCellStyle.setWrapText(false);</span><br><span class="line">        &#x2F;&#x2F; 水平居中</span><br><span class="line">        xssfCellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        &#x2F;&#x2F; 垂直居中</span><br><span class="line">        xssfCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        &#x2F;&#x2F; 前景颜色</span><br><span class="line">        xssfCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        xssfCellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());</span><br><span class="line">        &#x2F;&#x2F; 边框</span><br><span class="line">        xssfCellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBorderLeft(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        xssfCellStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        xssfCellStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        xssfCellStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        &#x2F;&#x2F; 防止数字过长,excel导出后,显示为科学计数法,如:防止8615192053888被显示为8.61519E+12</span><br><span class="line">        xssfCellStyle.setDataFormat(format.getFormat(&quot;0&quot;));</span><br><span class="line">        return xssfCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置单元格样式2</span><br><span class="line">     * @param sxssfWorkbook 工作簿</span><br><span class="line">     * @return 单元格样式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static XSSFCellStyle getAndSetXSSFCellStyleTwo(SXSSFWorkbook sxssfWorkbook) &#123;</span><br><span class="line">        XSSFCellStyle xssfCellStyle &#x3D; (XSSFCellStyle) sxssfWorkbook.createCellStyle();</span><br><span class="line">        XSSFDataFormat format &#x3D; (XSSFDataFormat) sxssfWorkbook.createDataFormat();</span><br><span class="line">        &#x2F;&#x2F; 是否自动换行</span><br><span class="line">        xssfCellStyle.setWrapText(false);</span><br><span class="line">        &#x2F;&#x2F; 水平居中</span><br><span class="line">        xssfCellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        &#x2F;&#x2F; 边框</span><br><span class="line">        xssfCellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBorderLeft(BorderStyle.THIN);</span><br><span class="line">        xssfCellStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        xssfCellStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        xssfCellStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        xssfCellStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        &#x2F;&#x2F; 垂直居中</span><br><span class="line">        xssfCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        &#x2F;&#x2F; 防止数字过长,excel导出后,显示为科学计数法,如:防止8615192053888被显示为8.61519E+12</span><br><span class="line">        xssfCellStyle.setDataFormat(format.getFormat(&quot;0&quot;));</span><br><span class="line">        return xssfCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取并设置header样式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static XSSFCellStyle getAndSetXSSFCellStyleHeader(SXSSFWorkbook sxssfWorkbook) &#123;</span><br><span class="line">        XSSFCellStyle headCellStyle &#x3D; (XSSFCellStyle) sxssfWorkbook.createCellStyle();</span><br><span class="line">        Font font &#x3D; sxssfWorkbook.createFont();</span><br><span class="line">        &#x2F;&#x2F; 字体大小</span><br><span class="line">        font.setFontHeightInPoints((short) 14);</span><br><span class="line">        &#x2F;&#x2F; 字体粗细</span><br><span class="line">        font.setBold(true);</span><br><span class="line">        &#x2F;&#x2F; 将字体应用到样式上面</span><br><span class="line">        headCellStyle.setFont(font);</span><br><span class="line">        return headCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 根据sheet页和head内容填充sheet页头部</span><br><span class="line">     * @param sheet sheet页</span><br><span class="line">     * @param map 题头</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final void createTableHeader(Sheet sheet, Map&lt;Integer, List&lt;ExcelBean&gt;&gt; map) &#123;</span><br><span class="line">        int startIndex &#x3D; 0;&#x2F;&#x2F;cell起始位置</span><br><span class="line">        int endIndex &#x3D; 0;&#x2F;&#x2F;cell终止位置</span><br><span class="line">        for (Map.Entry&lt;Integer, List&lt;ExcelBean&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            Row row &#x3D; sheet.createRow(entry.getKey());</span><br><span class="line">            List&lt;ExcelBean&gt; excels &#x3D; entry.getValue();</span><br><span class="line">            for (int x &#x3D; 0; x &lt; excels.size(); x++) &#123;</span><br><span class="line">                &#x2F;&#x2F;合并单元格</span><br><span class="line">                if (excels.get(x).getCols() &gt; 1) &#123;</span><br><span class="line">                    if (x &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                        endIndex +&#x3D; excels.get(x).getCols() - 1;</span><br><span class="line">                        CellRangeAddress range &#x3D; new CellRangeAddress(0, 0, startIndex, endIndex);</span><br><span class="line">                        sheet.addMergedRegion(range);</span><br><span class="line">                        startIndex +&#x3D; excels.get(x).getCols();</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        endIndex +&#x3D; excels.get(x).getCols();</span><br><span class="line">                        CellRangeAddress range &#x3D; new CellRangeAddress(0, 0, startIndex, endIndex);</span><br><span class="line">                        sheet.addMergedRegion(range);</span><br><span class="line">                        startIndex +&#x3D; excels.get(x).getCols();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Cell cell &#x3D; row.createCell(x);</span><br><span class="line">                    cell.setCellValue(excels.get(x).getHeadTextName());&#x2F;&#x2F; 设置内容</span><br><span class="line">                    if (excels.get(x).getCellStyle() !&#x3D; null) &#123;</span><br><span class="line">                        cell.getCellStyle().cloneStyleFrom(excels.get(x).getCellStyle());&#x2F;&#x2F; 设置格式</span><br><span class="line">                    &#125;</span><br><span class="line">                    cell.getCellStyle().cloneStyleFrom(headCellStyle);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    Cell cell &#x3D; row.createCell(x);</span><br><span class="line">                    cell.setCellValue(excels.get(x).getHeadTextName());&#x2F;&#x2F; 设置内容</span><br><span class="line">                    cell.setCellStyle(headCellStyle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写程序代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (rs.next())&#123;</span><br><span class="line"></span><br><span class="line">				&#x2F;&#x2F;当数据量超过1000000行的时候，重新生成一张sheet页，将剩余的数据网新的sheet页中写</span><br><span class="line">                if (rowIndex &gt;&#x3D; 1000000)&#123;</span><br><span class="line">                    temp++;</span><br><span class="line">                    Sheet sheet1 &#x3D; workbook.createSheet(&quot;转换数据&quot;.concat(String.valueOf(temp)));</span><br><span class="line">                    SxssfWorkbookUtil.createTableHeader(sheet1, map);</span><br><span class="line">                    sheets.add(sheet1);</span><br><span class="line">                    rowIndex &#x3D; 1;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Row row &#x3D; sheets.get(temp).createRow(rowIndex);</span><br><span class="line">                int width &#x3D; 300;</span><br><span class="line">                for(int j&#x3D;0;j&lt;count;j++)&#123;</span><br><span class="line">                    Cell cell &#x3D; row.createCell(j);</span><br><span class="line">                    String value &#x3D; &quot;&quot;;</span><br><span class="line">                    if (ObjectUtil.isNotNull(rs.getObject(j+1)))&#123;</span><br><span class="line">                        value &#x3D; String.valueOf(rs.getObject(j+1));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (j &#x3D;&#x3D; count - 1)&#123;</span><br><span class="line">                        switch (value) &#123;</span><br><span class="line">                            &#x2F;&#x2F;0&#x3D;未转换；1&#x3D;转换成功；2&#x3D;存在未转换数据</span><br><span class="line">                            case &quot;0&quot;:</span><br><span class="line">                                value &#x3D; &quot;未转换&quot;;</span><br><span class="line">                                break;</span><br><span class="line">                            case &quot;1&quot;:</span><br><span class="line">                                value &#x3D; &quot;转换成功&quot;;</span><br><span class="line">                                break;</span><br><span class="line">                            case &quot;2&quot;:</span><br><span class="line">                                value &#x3D; &quot;存在未转换数据&quot;;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    cell.setCellType(STRING);</span><br><span class="line">                    cell.setCellValue(value);</span><br><span class="line">                    &#x2F;&#x2F; 获得最大列宽</span><br><span class="line">                    if (!StringUtils.isNULL(value)) &#123;</span><br><span class="line">                        width &#x3D; value.getBytes().length * 300;</span><br><span class="line">                        cell.setCellStyle(fontStyle2);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line"></span><br><span class="line">                        cell.setCellStyle(fontStyle1);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F; 还未设置，设置当前</span><br><span class="line">                    if (widths.size() &lt;&#x3D; j) &#123;</span><br><span class="line">                        widths.add(width);</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#x2F;&#x2F; 比原来大，更新数据</span><br><span class="line">                    if (width &gt; widths.get(j)) &#123;</span><br><span class="line">                        widths.set(j, width);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                rowIndex++;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Excel导出</tag>
      </tags>
  </entry>
  <entry>
    <title>阻塞队列介绍</title>
    <url>/2021/03/26/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>本文主要对java中阻塞队列进行了一个简单的总结，并对阻塞队列中常用的一些方法进行了一下对比！</p>
<a id="more"></a>

<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>阻塞队列（BlockingQueue）</strong> 是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p>
<h3 id="java中的阻塞队列"><a href="#java中的阻塞队列" class="headerlink" title="java中的阻塞队列"></a>java中的阻塞队列</h3><table>
<thead>
<tr>
<th>阻塞队列种类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ArrayBlockingQueue</strong></td>
<td>一个由数组结构组成的有界阻塞队列</td>
</tr>
<tr>
<td><strong>LinkedBlockingQueue</strong></td>
<td>一个由链表结构组成的有界阻塞队列</td>
</tr>
<tr>
<td><strong>PriorityBlockingQueue</strong></td>
<td>一个支持优先级排序的无界阻塞队列</td>
</tr>
<tr>
<td><strong>DelayQueue</strong></td>
<td>一个使用优先级队列实现的无界阻塞队列</td>
</tr>
<tr>
<td><strong>SynchronousQueue</strong></td>
<td>一个不存储元素的阻塞队列</td>
</tr>
<tr>
<td><strong>LinkedTransferQueue</strong></td>
<td>一个由链表结构组成的无界阻塞队列</td>
</tr>
<tr>
<td><strong>LinkedBlockingDeque</strong></td>
<td>一个由链表结构组成的双向阻塞队列</td>
</tr>
</tbody></table>
<p>在JDK提供的阻塞队列中，除了LinkedBlockingDeque 是一个 Deque（双向的队列），其实现的接口是 BlockingDeque；其余6个阻塞队列则是 Queue（单向队列），实现的接口是 BlockingQueue。</p>
<h3 id="对于单向-BlockingQueue常用方法描述"><a href="#对于单向-BlockingQueue常用方法描述" class="headerlink" title="对于单向 BlockingQueue常用方法描述"></a>对于单向 <strong>BlockingQueue</strong>常用方法描述</h3><p><img src="http://qiniu.zhahongsheng.top//image/image-20210326120241742.png" alt="image-20210326120241742"></p>
<p>上述方法中，remove、element、offer、poll、peek都是属于Queue接口，其中add、remove、element在操作队列的时候，如果没有达到目的会抛出异常。而offer、poll、peek则只是给出一个操作状态的提示。</p>
<p>而对于take和put两种方法则会在有阻塞时，等待队列达到操作要求，完成操作，而不是直接返回结果。</p>
<h3 id="对于四种单向队列解释"><a href="#对于四种单向队列解释" class="headerlink" title="对于四种单向队列解释"></a>对于四种单向队列解释</h3><ol>
<li><p>LinkedBlockingQueue</p>
<p>LinkedBlockingQueue的容量在不指定的情况下为 Integer.MAX_VALUE，但是也可以指定其最大容量，其中主要用到 put 和 take 方法，它是基于链表的队列，此队列按 FIFO （先进先出）排序元素，是线程安全的。</p>
</li>
<li><p>ArrayBlockingQueue</p>
<p>ArrayBlockingQueue在构造时需要指定容量，并可以选择是否需要公平性，如果公平参数被设置为 true，等待时间最长的线程会优先得到处理（其实就是通过将 ReentrantLock 设置为 true 来达到这种公平性：即等待时间最长的线程会先操作）。通常，公平性会使你在性能上付出代价，只有在的确非常需要的时候再使用它。它是基于数组的阻塞循环队列，此队列按 FIFO（先进先出）原则对元素进行排序</p>
</li>
<li><p>PriorityBlockingQueue</p>
<p>PriorityBlockingQueue是一个带优先级的 队列，而不是先进先出队列。元素按优先级顺序被移除，该队列也没有上限（看了一下源码，PriorityBlockingQueue是对 PriorityQueue的再次包装，是基于堆数据结构的，而PriorityQueue是没有容量限制的，与ArrayList一样，所以在优先阻塞 队列上put时是不会受阻的。虽然此队列逻辑上是无界的，但是由于资源被耗尽，所以试图执行添加操作可能会导致 OutOfMemoryError），但是如果队列为空，那么取元素的操作take就会阻塞，所以它的检索操作take是受阻的。另外，往入该队列中的元 素要具有比较能力。</p>
</li>
<li><p>DelayQueue</p>
<p>DelayQueue（基于PriorityQueue来实现的）是一个存放Delayed 元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素。如果延迟都还没有期满，则队列没有头部，并且poll将返回null。当一个元素的 getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于或等于零的值时，则出现期满，poll就以移除这个元素了。此队列不允许使用 null 元素。</p>
</li>
</ol>
<h3 id="阻塞队列的实现原理"><a href="#阻塞队列的实现原理" class="headerlink" title="阻塞队列的实现原理"></a>阻塞队列的实现原理</h3><p>阻塞队列实际上是使用通知模式实现的，即当生产者在往满的队列里添加元素时会阻塞生产者，当消费者消费了一个队列中的元素的时候会通知生产者当前队列可用，可以继续生产了。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>队列</tag>
        <tag>阻塞队列</tag>
      </tags>
  </entry>
  <entry>
    <title>并发中变量可见性</title>
    <url>/2021/01/17/%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%8F%AF%E8%A7%81%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>本文主要介绍高并发中变量的可见性问题</p>
<a id="more"></a>

<p><img src="R:\Temp\TMP\1584879219560.png" alt="1584879219560"></p>
<h1 id="并发中的变量的可见性问题"><a href="#并发中的变量的可见性问题" class="headerlink" title="并发中的变量的可见性问题"></a>并发中的变量的可见性问题</h1><blockquote>
<h2 id="问题1：变量分为哪几类"><a href="#问题1：变量分为哪几类" class="headerlink" title="问题1：变量分为哪几类"></a>问题1：变量分为哪几类</h2><blockquote>
<ol>
<li>全局变量</li>
<li>局部变量</li>
</ol>
</blockquote>
<h2 id="问题2：如何在多个线程间共享数据"><a href="#问题2：如何在多个线程间共享数据" class="headerlink" title="问题2：如何在多个线程间共享数据"></a>问题2：如何在多个线程间共享数据</h2><blockquote>
<p>用全局变量：静态变量，或者共享对象</p>
</blockquote>
<h2 id="问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？"><a href="#问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？" class="headerlink" title="问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？"></a>问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？</h2><h2 id="怎样才能保证可以看到最新值？"><a href="#怎样才能保证可以看到最新值？" class="headerlink" title="怎样才能保证可以看到最新值？"></a>怎样才能保证可以看到最新值？</h2><blockquote>
<p>方式一：synchronized（同步关键字，使用的时候加）</p>
<p>方式二：volatile（定义的时候加）</p>
</blockquote>
</blockquote>
<blockquote>
<h2 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h2><blockquote>
<ul>
<li>守护线程</li>
<li>非守护线程</li>
</ul>
</blockquote>
<h2 id="创建线程有几种方式？"><a href="#创建线程有几种方式？" class="headerlink" title="创建线程有几种方式？"></a>创建线程有几种方式？</h2><blockquote>
<ul>
<li>runable</li>
<li>callable</li>
<li>Thread t = new Thread(runable）</li>
</ul>
</blockquote>
</blockquote>
<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><blockquote>
<h2 id="Java内存模型及操作规范"><a href="#Java内存模型及操作规范" class="headerlink" title="Java内存模型及操作规范"></a>Java内存模型及操作规范</h2><blockquote>
<ul>
<li>共享变量必须存放在主内存中</li>
<li>现场有自己的工作内存，线程只可操作自己的工作内存</li>
<li>线程要操作共享变量，需要从主内存中读取到工作内存，改变值后需要从工作内存中同步到朱北村中</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p><img src="http://qiniu.zhahongsheng.top/1584882177504.png" alt="1584882177504"></p>
</blockquote>
<blockquote>
<h2 id="Java内存模式会带来什么问题"><a href="#Java内存模式会带来什么问题" class="headerlink" title="Java内存模式会带来什么问题"></a>Java内存模式会带来什么问题</h2></blockquote>
<h2 id="Java内存模型-同步交互协议，规定的八种原子操作："><a href="#Java内存模型-同步交互协议，规定的八种原子操作：" class="headerlink" title="Java内存模型-同步交互协议，规定的八种原子操作："></a>Java内存模型-同步交互协议，规定的八种原子操作：</h2><blockquote>
<p>lock（锁定）：将主内存中的变量锁定，为一个线程所独占</p>
<p>unlock（解锁）：将lock加的锁解除，此时其他的线程可以有机会访问此变量</p>
<p>read（读取）：作用于主内存变量，将主内存中的变量值读到</p>
</blockquote>
<h2 id="Java内存模型-同步交互协议，操作规范"><a href="#Java内存模型-同步交互协议，操作规范" class="headerlink" title="Java内存模型-同步交互协议，操作规范"></a>Java内存模型-同步交互协议，操作规范</h2><blockquote>
<p>将一个变量从主内存复制到工作内存要顺序执行read、load操作，要将</p>
<p><img src="R:\Temp\TMP\1584883805335.png" alt="1584883805335"></p>
</blockquote>
<h2 id="保证变量可见性的方式"><a href="#保证变量可见性的方式" class="headerlink" title="保证变量可见性的方式"></a>保证变量可见性的方式</h2><blockquote>
<p><img src="R:\Temp\TMP\1584883980181.png" alt="1584883980181"></p>
</blockquote>
<h2 id="为什么使用volatile关键字"><a href="#为什么使用volatile关键字" class="headerlink" title="为什么使用volatile关键字"></a>为什么使用volatile关键字</h2><blockquote>
<p><img src="R:\Temp\TMP\1584885646653.png" alt="1584885646653"></p>
</blockquote>
<h2 id="volatile还有什么用途"><a href="#volatile还有什么用途" class="headerlink" title="volatile还有什么用途"></a>volatile还有什么用途</h2><blockquote>
<p>volatile可用于限制局部代码指令重排序</p>
</blockquote>
<blockquote>
<p><img src="R:\Temp\TMP\1584885929013.png" alt="1584885805796"></p>
</blockquote>
<h2 id="volatile的使用场景"><a href="#volatile的使用场景" class="headerlink" title="volatile的使用场景"></a>volatile的使用场景</h2><blockquote>
<h3 id="volatile的使用范围"><a href="#volatile的使用范围" class="headerlink" title="volatile的使用范围"></a>volatile的使用范围</h3><blockquote>
<ol>
<li>volatile只可修饰成员变量</li>
<li>多线程并发下，才需要使用到</li>
</ol>
</blockquote>
</blockquote>
<p>​        </p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决Tomcat启动web项目，浏览器js中文乱码，导致页面空白</title>
    <url>/2021/03/29/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Tomcat%E5%90%AF%E5%8A%A8web%E9%A1%B9%E7%9B%AE%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8js%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%EF%BC%8C%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD/</url>
    <content><![CDATA[<p>针对以前部署在低版本的Tomcat上面的web项目，迁移到新版本后浏览器访问js出现中文乱码！</p>
<a id="more"></a>



<p>问题背景：</p>
<p>针对以前部署在低版本的Tomcat上面的web项目，迁移到新版本后浏览器访问js出现中文乱码，导致页面空白。如下图所示：</p>
<p><img src="http://qiniu.zhahongsheng.top//image/image-20210329125548624.png" alt="image-20210329125548624"></p>
<p>从上面现象可以看出是浏览器在解析js文件的时候，文件里面产生了中文乱码才导致的，所以很快就定位到问题应该是出在了Tomcat上面，通过查阅资料后发现只需要在Tomcat的\tomcat\bin\catalina.bat文件中添加编码格式就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set &quot;JAVA_OPTS&#x3D;%JAVA_OPTS% %JSSE_OPTS%  -Dfile.encoding&#x3D;UTF-8&quot;</span><br></pre></td></tr></table></figure>
<p><img src="http://qiniu.zhahongsheng.top//image/image-20210329130112660.png" alt="image-20210329130112660"></p>
<p>修改完成后，点击保存，<strong>清除浏览器缓存，重启Tomcat</strong>，问题解决。</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>中文乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>linux系统安装JDK的几种方法</title>
    <url>/2021/03/30/linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85JDK%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>本文主要介绍再Linux系统下面如何安装jdk，提供了我们常用的集中安装过方式，各位可以借鉴适合自己的方式安装jdk！</p>
<a id="more"></a>


<h3 id="方法一：手动解压tar压缩包"><a href="#方法一：手动解压tar压缩包" class="headerlink" title="方法一：手动解压tar压缩包"></a>方法一：手动解压tar压缩包</h3><ol>
<li><p>通过工具连接远程服务器或者虚拟机，选择一个文件夹下创建java目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir&#x2F;usr&#x2F;java</span><br><span class="line">[root@localhost ~]# cd &#x2F;usr&#x2F;java</span><br></pre></td></tr></table></figure></li>
<li><p>上传下载好的以tar.gz结尾的JDK压缩包到创建的java目录文件夹下面，使用命令解压压缩包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# tar -zxvf jdk-8u281-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>在profile文件中添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#set java environment</span><br><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.7.0_79</span><br><span class="line">JRE_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.7.0_79&#x2F;jre</span><br><span class="line">CLASS_PATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure>
<p>在通过命令或者重其服务器使其生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li>
<li><p>验证JDK有效性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# java -version</span><br><span class="line">java version &quot;1.7.0_79&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_79-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)</span><br></pre></td></tr></table></figure>
<p>若输入命令，出现以下信息，则代表JDK安装成功。</p>
</li>
</ol>
<h3 id="方法二：利用yum安装JDK（centos）"><a href="#方法二：利用yum安装JDK（centos）" class="headerlink" title="方法二：利用yum安装JDK（centos）"></a>方法二：利用yum安装JDK（centos）</h3><p>使用yum安装只能是安装yum库中已有的一些JDK，目前库里面只有openjdk</p>
<ol>
<li><p>使用命令查看yum库中含有哪些jdk版本（openjdk）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hostname ~]# yum search java|grep jdk</span><br><span class="line">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class="line">ldapjdk-javadoc.noarch : Javadoc for ldapjdk</span><br><span class="line">java-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation</span><br><span class="line">java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.7.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</span><br><span class="line">java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.7.0-openjdk-headless.x86_64 : The OpenJDK runtime environment without</span><br><span class="line">java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation</span><br><span class="line">java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">java-1.8.0-openjdk.i686 : OpenJDK Runtime Environment 8</span><br><span class="line">java-1.8.0-openjdk.x86_64 : OpenJDK 8 Runtime Environment</span><br><span class="line">java-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connector</span><br><span class="line">java-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</span><br><span class="line">java-1.8.0-openjdk-demo.i686 : OpenJDK Demos 8</span><br><span class="line">java-1.8.0-openjdk-demo.x86_64 : OpenJDK 8 Demos</span><br><span class="line">java-1.8.0-openjdk-devel.i686 : OpenJDK Development Environment 8</span><br><span class="line">java-1.8.0-openjdk-devel.x86_64 : OpenJDK 8 Development Environment</span><br><span class="line">java-1.8.0-openjdk-headless.i686 : OpenJDK Headless Runtime Environment 8</span><br><span class="line">java-1.8.0-openjdk-headless.x86_64 : OpenJDK 8 Headless Runtime Environment</span><br><span class="line">java-1.8.0-openjdk-javadoc.noarch : OpenJDK 8 API documentation</span><br><span class="line">java-1.8.0-openjdk-javadoc-zip.noarch : OpenJDK 8 API documentation compressed</span><br><span class="line">java-1.8.0-openjdk-src.i686 : OpenJDK Source Bundle 8</span><br><span class="line">java-1.8.0-openjdk-src.x86_64 : OpenJDK 8 Source Bundle</span><br><span class="line">java-11-openjdk.i686 : OpenJDK Runtime Environment 11</span><br><span class="line">java-11-openjdk.x86_64 : OpenJDK 11 Runtime Environment</span><br><span class="line">java-11-openjdk-demo.i686 : OpenJDK Demos 11</span><br><span class="line">java-11-openjdk-demo.x86_64 : OpenJDK 11 Demos</span><br><span class="line">java-11-openjdk-devel.i686 : OpenJDK Development Environment 11</span><br><span class="line">java-11-openjdk-devel.x86_64 : OpenJDK 11 Development Environment</span><br><span class="line">java-11-openjdk-headless.i686 : OpenJDK Headless Runtime Environment 11</span><br><span class="line">java-11-openjdk-headless.x86_64 : OpenJDK 11 Headless Runtime Environment</span><br><span class="line">java-11-openjdk-javadoc.i686 : OpenJDK 11 API documentation</span><br><span class="line">java-11-openjdk-javadoc.x86_64 : OpenJDK 11 API documentation</span><br><span class="line">java-11-openjdk-javadoc-zip.i686 : OpenJDK 11 API documentation compressed in a</span><br><span class="line">java-11-openjdk-javadoc-zip.x86_64 : OpenJDK 11 API documentation compressed in</span><br><span class="line">java-11-openjdk-jmods.i686 : JMods for OpenJDK 11</span><br><span class="line">java-11-openjdk-jmods.x86_64 : JMods for OpenJDK 11</span><br><span class="line">java-11-openjdk-src.i686 : OpenJDK Source Bundle 11</span><br><span class="line">java-11-openjdk-src.x86_64 : OpenJDK 11 Source Bundle</span><br><span class="line">java-11-openjdk-static-libs.i686 : OpenJDK libraries for static linking 11</span><br><span class="line">java-11-openjdk-static-libs.x86_64 : OpenJDK 11 libraries for static linking</span><br><span class="line">java-latest-openjdk.x86_64 : OpenJDK 15 Runtime Environment</span><br><span class="line">java-latest-openjdk-debug.x86_64 : OpenJDK 15 Runtime Environment with full</span><br><span class="line">java-latest-openjdk-demo.x86_64 : OpenJDK 15 Demos</span><br><span class="line">java-latest-openjdk-demo-debug.x86_64 : OpenJDK 15 Demos with full debugging on</span><br><span class="line">java-latest-openjdk-demo-fastdebug.x86_64 : OpenJDK 15 Demos with minimal</span><br><span class="line">java-latest-openjdk-devel.x86_64 : OpenJDK 15 Development Environment</span><br><span class="line">java-latest-openjdk-devel-debug.x86_64 : OpenJDK 15 Development Environment with</span><br><span class="line">java-latest-openjdk-devel-fastdebug.x86_64 : OpenJDK 15 Development Environment</span><br><span class="line">java-latest-openjdk-fastdebug.x86_64 : OpenJDK 15 Runtime Environment with</span><br><span class="line">java-latest-openjdk-headless.x86_64 : OpenJDK 15 Headless Runtime Environment</span><br><span class="line">java-latest-openjdk-headless-debug.x86_64 : OpenJDK 15 Runtime Environment with</span><br><span class="line">java-latest-openjdk-headless-fastdebug.x86_64 : OpenJDK 15 Runtime Environment</span><br><span class="line">java-latest-openjdk-javadoc.x86_64 : OpenJDK 15 API documentation</span><br><span class="line">java-latest-openjdk-javadoc-zip.x86_64 : OpenJDK 15 API documentation compressed</span><br><span class="line">java-latest-openjdk-jmods.x86_64 : JMods for OpenJDK 15</span><br><span class="line">java-latest-openjdk-jmods-debug.x86_64 : JMods for OpenJDK 15 with full</span><br><span class="line">java-latest-openjdk-jmods-fastdebug.x86_64 : JMods for OpenJDK 15 with minimal</span><br><span class="line">java-latest-openjdk-src.x86_64 : OpenJDK 15 Source Bundle</span><br><span class="line">java-latest-openjdk-src-debug.x86_64 : OpenJDK 15 Source Bundle for packages</span><br><span class="line">java-latest-openjdk-src-fastdebug.x86_64 : OpenJDK 15 Source Bundle</span><br><span class="line">java-latest-openjdk-static-libs.x86_64 : OpenJDK 15 libraries for static linking</span><br><span class="line">java-latest-openjdk-static-libs-debug.x86_64 : OpenJDK 15 libraries for static</span><br><span class="line">java-latest-openjdk-static-libs-fastdebug.x86_64 : OpenJDK 15 libraries for</span><br><span class="line">ldapjdk.noarch : The Mozilla LDAP Java SDK</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>从上述提供的版本中选择合适的版本进行安装，直接使用以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install OpenJDK 8 Source Bundle</span><br></pre></td></tr></table></figure>
<p>使用此命令安装的默认安装位置是在 /usr/lib/jvm/路径下面，文件夹对应的就是安装包文件名</p>
</li>
<li><p>设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>在profile文件中添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.7.0-openjdk-1.7.0.75.x86_64</span><br><span class="line">JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre</span><br><span class="line">CLASS_PATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure>
<p>上面第一行的最后内容与自己安装位置下JDK文件夹的名称一致即可</p>
<p>使用命令使其生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li>
<li><p>验证是否安装成功与第一步方法一致</p>
</li>
</ol>
<h3 id="方法三：采用apt-get安装（ubuntu）"><a href="#方法三：采用apt-get安装（ubuntu）" class="headerlink" title="方法三：采用apt-get安装（ubuntu）"></a>方法三：采用apt-get安装（ubuntu）</h3><p>此种方式安装的jdk也是安装的openjdk</p>
<ol>
<li><p>使用命令直接安装openjdk8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 切换至root用户</span><br><span class="line">sudo su root</span><br><span class="line"># 更新linux仓库</span><br><span class="line">apt-get update</span><br><span class="line"># 下载openjdk8</span><br><span class="line">apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li>
<li><p>安装完成后，查看jdk版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="http://qiniu.zhahongsheng.top//image/2018103116260425.png" alt="img"></p>
<p>若出现上述显示代表安装成功</p>
</li>
</ol>
<h3 id="方法四：采用rpm方式安装"><a href="#方法四：采用rpm方式安装" class="headerlink" title="方法四：采用rpm方式安装"></a>方法四：采用rpm方式安装</h3><ol>
<li><p>下载rpm软件包，这里下载的是jdk-8u281-linux-x64.rpm,对应的下载可直接到官网下载，此处提供我本地网盘的一个连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1--kyxdFMzCN9vqsEzkS96g </span><br><span class="line">提取码：d2hy </span><br></pre></td></tr></table></figure></li>
<li><p>下载好rpm包后直接上传至服务器对应需要安装的位置，通过ll命令查看，若显示绿色则代表是可执行文件，否则没有权限，需先修改文件权限，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@xx-4 ~]# chmod 755 jdk-8u281-linux-x64.rpm</span><br></pre></td></tr></table></figure>
<p>执行完上述命令后再通过ll命令查看会发现对应的文件变成了绿色。</p>
</li>
<li><p>使用rpm命令进行安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@xx-4 ~]# rpm -ivh jdk-8u281-linux-x64.rpm</span><br></pre></td></tr></table></figure>
<p>等待安装完成。</p>
</li>
<li><p>查看jdk安装路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@xx-4 ~]# rpm -ql jdk</span><br></pre></td></tr></table></figure></li>
<li><p>记住jdk的安装路径，使用上面提到的方式设置JAVA_HOME环境变量到path路径下面。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
</search>
