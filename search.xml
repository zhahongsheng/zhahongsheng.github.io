<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx</title>
    <url>/2021/01/17/Nignx%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="1-传统项目生命周期"><a href="#1-传统项目生命周期" class="headerlink" title="1.传统项目生命周期"></a>1.传统项目生命周期</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.调研阶段</span><br><span class="line">2.设计阶段</span><br><span class="line">3.开发阶段</span><br><span class="line">4.测试阶段</span><br><span class="line">5.运营阶段</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">阶段</th>
<th align="center">目的</th>
<th align="center">人员</th>
<th align="center">节点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">调研阶段</td>
<td align="center">需求可行性</td>
<td align="center">产品经理</td>
<td align="center">角度、思路、方案，老板拍板</td>
</tr>
<tr>
<td align="center">设计阶段</td>
<td align="center">方案可视化</td>
<td align="center">产品团队主导，开发测试运维参与</td>
<td align="center">产品需求文档、项目里程碑</td>
</tr>
<tr>
<td align="center">开发阶段</td>
<td align="center">方案运行</td>
<td align="center">开发团队为主，运维团队参与</td>
<td align="center">阶段项目正常运行</td>
</tr>
<tr>
<td align="center">测试阶段</td>
<td align="center">保证功能完善</td>
<td align="center">运维、开发参与</td>
<td align="center">项目功能复合要求</td>
</tr>
<tr>
<td align="center">运营阶段</td>
<td align="center">项目部署维护</td>
<td align="center">运维团队为主，开发、产品团队参与</td>
<td align="center">项目终止，功能迭代</td>
</tr>
</tbody></table>
<h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ol>
<li>为项目提供了按阶段划分的检查点，当前阶段完成后，只需关注后续阶段。</li>
</ol>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol>
<li>开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加开发风险</li>
<li>突出缺点是不适应用户需求的变化</li>
</ol>
<h3 id="2-新型项目生命周期"><a href="#2-新型项目生命周期" class="headerlink" title="2.新型项目生命周期"></a>2.新型项目生命周期</h3><p>快速的实现一个产品所需的<strong>主要功能</strong>然后推向市场，根据用户的反馈和需求不停的对产品的功能进行迭代</p>
<p><img src="C:\Users\zhahongsheng\AppData\Roaming\Typora\typora-user-images\image-20201225171608660.png" alt="image-20201225171608660"></p>
<h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ol>
<li>注重市场快速反应能力，也即具体应对能力，客户前期满意度高。</li>
</ol>
<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ol>
<li>注重人员的沟通，忽略文档的重要性，若项目人员流动太大，会给维护带来不少难度。</li>
<li>需要项目中存在禁言较强的人，否则大项目中容易遇到瓶颈问题</li>
</ol>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>传统项目生命周期：不适应用户需求的变化</li>
<li>新型项目生命周期：快速开发、进行迭代</li>
</ul>
<h3 id="项目开发环境"><a href="#项目开发环境" class="headerlink" title="项目开发环境"></a>项目开发环境</h3><p>在一个项目开发过程中一般会涉及到以下五个环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">个人开发环境：</span><br><span class="line">	工作人员：自己</span><br><span class="line">	工作平台：个人笔记本、公司配备的电脑</span><br><span class="line">	工作特点：环境是自己配置的，团队中额不同的个人环境可以不一样</span><br><span class="line">	工作内容：项目的子模块、子功能</span><br><span class="line">	完成标准：完成领导安排的内容</span><br><span class="line">	</span><br><span class="line">公司开发环境：</span><br><span class="line">	工作人员：开发团队</span><br><span class="line">	工作平台：公司内部服务器</span><br><span class="line">	工作特点：服务器环境和线上环境完全一致</span><br><span class="line">	工作内容：项目子模块间的功能联调</span><br><span class="line">	完成标准：项目阶段开发、测试完成</span><br><span class="line">	</span><br><span class="line">项目测试环境：</span><br><span class="line">	工作人员：测试团队</span><br><span class="line">	工作平台：公司内部服务器</span><br><span class="line">	工作特点：服务器环境和线上环境完全一致</span><br><span class="line">	工作内容：项目功能、非功能、探索等测试</span><br><span class="line">	完成标准：项目阶段功能正常运行</span><br><span class="line">	</span><br><span class="line">项目预发布环境：</span><br><span class="line">	工作人员：运维团队</span><br><span class="line">	工作平台：公司线上服务器组中的一台</span><br><span class="line">	工作特点：服务器环境和线上环境完全一致</span><br><span class="line">	工作内容：特殊功能测试（支付）、压力测试、安全测试</span><br><span class="line">	完成标准：项目阶段功能正常运行，最后一道防线</span><br><span class="line">	</span><br><span class="line">项目线上环境：</span><br><span class="line">	工作人员：运维团队</span><br><span class="line">	工作平台：公司线上服务器组</span><br><span class="line">	工作特点：标准线上服务器环境</span><br><span class="line">	工作内容：代码部署和维护</span><br><span class="line">	完成标准：项目正常运行</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.0</title>
    <url>/2021/01/17/SpringBoot2.0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="SpringBoot引入"><a href="#SpringBoot引入" class="headerlink" title="SpringBoot引入"></a>SpringBoot引入</h2><h3 id="1-为什么要用SpringBoot"><a href="#1-为什么要用SpringBoot" class="headerlink" title="1 为什么要用SpringBoot"></a>1 为什么要用SpringBoot</h3><p>传统项目：整合SSH或者SSM，考虑配置文件、Jar冲突问题、整合起来繁琐</p>
<p>​        打包方式：打包成一个war放入Tomcatwebapp目录下进行执行</p>
<p>SpringBoot是一个快速开发框架，能够帮助我们快速整合第三方框架（Maven依赖关系##Maven继承），<strong>完全采用注解化</strong>，简化XML配置。内置嵌入Http服务器（Tomcat、Jetty），默认嵌入Tomcat服务器。<strong>最终Java应用程序进行执行。</strong></p>
<p>核心：第三方框架</p>
<p>​    原理（Maven依赖关系##Maven继承）</p>
<p>​    完全采用注解化，在Spring3.0之后采用注解方式启动SpringMVC、内置嵌入Http服务器、Java 创建Tomcat</p>
<h3 id="2-SpringBoot与SpringCloud关系"><a href="#2-SpringBoot与SpringCloud关系" class="headerlink" title="2 SpringBoot与SpringCloud关系"></a>2 SpringBoot与SpringCloud关系</h3><ol>
<li>SpringBoot其实就是一个快速开发框架，能够帮助我们快速整合<strong>（第三方常用框架），完全采用注解化、简化XML配置、最终以Java应用程序进行执行。</strong></li>
<li>SpringCloud是一套<strong>目前</strong>完整微服务框架，功能非常强大。注册中心、客户端调用工具、服务治理（负载均衡、断路器、<strong>分布式配置中心。网关、服务链路等</strong>）、</li>
<li>SpringBoot不是微服务框架</li>
</ol>
<p>微服务通讯技术Http+json（restful）轻量级</p>
<p>SpringBoot：Web组件默认集成SpringMVC，SpringCloud依赖于SpringBoot实现微服务，使用SpringMVC编写服务接口</p>
<p>微服务开发：RPC远程通讯技术、服务治理</p>
<p>核心区别：SpringCloud 微服务框架，单纯的知识集成Springboot实现快速开发</p>
<h3 id="3-SpringBoot与SpringMVC关系"><a href="#3-SpringBoot与SpringMVC关系" class="headerlink" title="3 SpringBoot与SpringMVC关系"></a>3 SpringBoot与SpringMVC关系</h3><ol>
<li>SpringBoot Web组件集成SpringMVC框架，但是SpringBoot启动SpringMVC的时候没有传统配置文件，那么是如何启动的？</li>
<li>SpringMVC3.0之后支持注解方式启动SpringMVC（使用Java代码启动SpringMVC）</li>
<li>SpringBoot十一个快速开发框架，帮助我们快速的整合第三方常用使用框架（Maven集成方式），完全采用注解化（使用注解方式启动SpringMVC），简化XML，内置Http服务器（Tomcat、Jetty）、<strong>最终是以Java应用程序执行。</strong></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Nginx配合Tomcat对单体web项目集群部署配置</title>
    <url>/2021/01/17/Nginx%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>本文主要介绍如何使用Nginx对单体web引用进行集群部署！</p>
<a id="more"></a>

<h3 id="一、下载Nginx服务器"><a href="#一、下载Nginx服务器" class="headerlink" title="一、下载Nginx服务器"></a>一、下载Nginx服务器</h3><p>下载地址：<a href="http://nginx.org/">http://nginx.org/</a></p>
<p>在此地址下面选择稳定版本的Nginx下载到本地，解压出来</p>
<p><img src="C:\Users\zhahongsheng\AppData\Roaming\Typora\typora-user-images\image-20210111192526668.png" alt="image-20210111192526668"></p>
<p><img src="C:\Users\zhahongsheng\AppData\Roaming\Typora\typora-user-images\image-20210111193114761.png" alt="image-20210111193114761"></p>
<h3 id="二、测试Nginx服务"><a href="#二、测试Nginx服务" class="headerlink" title="二、测试Nginx服务"></a>二、测试Nginx服务</h3><p>解压好Nginx后直接双机Nginx.exe文件，启动Nginx，在浏览器中输入localhost，如果出现以下页面则证明Nginx已经成功启动。</p>
<p><img src="C:\Users\zhahongsheng\AppData\Roaming\Typora\typora-user-images\image-20210111195645028.png" alt="image-20210111195645028"></p>
<h3 id="三、修改Nginx配置文件"><a href="#三、修改Nginx配置文件" class="headerlink" title="三、修改Nginx配置文件"></a>三、修改Nginx配置文件</h3><p>修改Nginx中conf文件下的nginx.conf文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据服务器性能进行权重设置</span><br><span class="line">    upstream wgf.com&#123; </span><br><span class="line">        server 127.0.0.1:8090  weight&#x3D;3;    #真实服务器A(sxwgf-PC)</span><br><span class="line">        server 127.0.0.1:8091  weight&#x3D;1;    #真实服务器B(sxwgf-PC)</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>首先在http下面添加集群部署配置文件，如上面代码所示，如果有多个不同的web服务器，只需要将相关地址按照上面所示格式加进去即可 ，若是不同服务器性能不同，也可按照服务器的新能好坏，对对应的服务分配不同的权限，以均衡不同服务器的访问情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8088;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location &#x2F;C1-DM &#123;</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass  http:&#x2F;&#x2F;wgf.com; </span><br><span class="line">            proxy_redirect  default; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其次修改server部分的内容，此部分主要是针对Nginx的修改，Nginx的默认监听端口是80端口，如果想要修改为其他端口的话，自己修改好即可。其次在location里面修改Nginx的访问位置。集群部署的情况下，proxy_pass字段里面注意填写上面配置的集群的名字wgf.com。其他的可以不用做修改。</p>
<h3 id="四、Tomcat启动web应用"><a href="#四、Tomcat启动web应用" class="headerlink" title="四、Tomcat启动web应用"></a>四、Tomcat启动web应用</h3><p>若果是在同一个服务器下面需要启动多个Tomcat的话，则可直接将现有的Tomcat复制几份，修改Tomcat的文件名，便于区分。其次修改各个Tomcat的配置文件，防止端口冲突</p>
<p>修改Tomcat下面conf文件夹下的server.xml文件中的以下三个标签中port对应的数值，保证其对应的值在不同Tomcat下都不同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Server port&#x3D;&quot;8006&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Connector port&#x3D;&quot;8090&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br><span class="line">               </span><br><span class="line">&lt;Connector port&#x3D;&quot;8010&quot; protocol&#x3D;&quot;AJP&#x2F;1.3&quot; redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>若果是在不同服务系下面则不用修改。</p>
<p>做完以上操作后，启动Tomcat，先测试一下各个Tomcat下面下面启动的应用。</p>
<h3 id="五、重启Nginx服务"><a href="#五、重启Nginx服务" class="headerlink" title="五、重启Nginx服务"></a>五、重启Nginx服务</h3><p>在Nginx.exe文件所在的文件下，进入cmd，执行重启服务命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>重启完成后，在浏览器输入<a href="http://Nginx服务启动的地址：Nginx服务监听的端口/Tomcat下启动对应应用的应用名。">http://Nginx服务启动的地址：Nginx服务监听的端口/Tomcat下启动对应应用的应用名。</a></p>
<p>若看到应用页面正常启动，则代表部署完成。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>并发中变量可见性</title>
    <url>/2021/01/17/%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%8F%AF%E8%A7%81%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="R:\Temp\TMP\1584879219560.png" alt="1584879219560"></p>
<h1 id="并发中的变量的可见性问题"><a href="#并发中的变量的可见性问题" class="headerlink" title="并发中的变量的可见性问题"></a>并发中的变量的可见性问题</h1><blockquote>
<h2 id="问题1：变量分为哪几类"><a href="#问题1：变量分为哪几类" class="headerlink" title="问题1：变量分为哪几类"></a>问题1：变量分为哪几类</h2><blockquote>
<ol>
<li>全局变量</li>
<li>局部变量</li>
</ol>
</blockquote>
<h2 id="问题2：如何在多个线程间共享数据"><a href="#问题2：如何在多个线程间共享数据" class="headerlink" title="问题2：如何在多个线程间共享数据"></a>问题2：如何在多个线程间共享数据</h2><blockquote>
<p>用全局变量：静态变量，或者共享对象</p>
</blockquote>
<h2 id="问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？"><a href="#问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？" class="headerlink" title="问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？"></a>问题三：一个变量在线程1中被改变值了，在线程2中能看到该变量的最新值吗？</h2><h2 id="怎样才能保证可以看到最新值？"><a href="#怎样才能保证可以看到最新值？" class="headerlink" title="怎样才能保证可以看到最新值？"></a>怎样才能保证可以看到最新值？</h2><blockquote>
<p>方式一：synchronized（同步关键字，使用的时候加）</p>
<p>方式二：volatile（定义的时候加）</p>
</blockquote>
</blockquote>
<blockquote>
<h2 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h2><blockquote>
<ul>
<li>守护线程</li>
<li>非守护线程</li>
</ul>
</blockquote>
<h2 id="创建线程有几种方式？"><a href="#创建线程有几种方式？" class="headerlink" title="创建线程有几种方式？"></a>创建线程有几种方式？</h2><blockquote>
<ul>
<li>runable</li>
<li>callable</li>
<li>Thread t = new Thread(runable）</li>
</ul>
</blockquote>
</blockquote>
<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><blockquote>
<h2 id="Java内存模型及操作规范"><a href="#Java内存模型及操作规范" class="headerlink" title="Java内存模型及操作规范"></a>Java内存模型及操作规范</h2><blockquote>
<ul>
<li>共享变量必须存放在主内存中</li>
<li>现场有自己的工作内存，线程只可操作自己的工作内存</li>
<li>线程要操作共享变量，需要从主内存中读取到工作内存，改变值后需要从工作内存中同步到朱北村中</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p><img src="C:\Users\zhahongsheng\Documents\1584882177504.png" alt="1584882177504"></p>
</blockquote>
<blockquote>
<h2 id="Java内存模式会带来什么问题"><a href="#Java内存模式会带来什么问题" class="headerlink" title="Java内存模式会带来什么问题"></a>Java内存模式会带来什么问题</h2></blockquote>
<h2 id="Java内存模型-同步交互协议，规定的八种原子操作："><a href="#Java内存模型-同步交互协议，规定的八种原子操作：" class="headerlink" title="Java内存模型-同步交互协议，规定的八种原子操作："></a>Java内存模型-同步交互协议，规定的八种原子操作：</h2><blockquote>
<p>lock（锁定）：将主内存中的变量锁定，为一个线程所独占</p>
<p>unlock（解锁）：将lock加的锁解除，此时其他的线程可以有机会访问此变量</p>
<p>read（读取）：作用于主内存变量，将主内存中的变量值读到</p>
</blockquote>
<h2 id="Java内存模型-同步交互协议，操作规范"><a href="#Java内存模型-同步交互协议，操作规范" class="headerlink" title="Java内存模型-同步交互协议，操作规范"></a>Java内存模型-同步交互协议，操作规范</h2><blockquote>
<p>将一个变量从主内存复制到工作内存要顺序执行read、load操作，要将</p>
<p><img src="R:\Temp\TMP\1584883805335.png" alt="1584883805335"></p>
</blockquote>
<h2 id="保证变量可见性的方式"><a href="#保证变量可见性的方式" class="headerlink" title="保证变量可见性的方式"></a>保证变量可见性的方式</h2><blockquote>
<p><img src="R:\Temp\TMP\1584883980181.png" alt="1584883980181"></p>
</blockquote>
<h2 id="为什么使用volatile关键字"><a href="#为什么使用volatile关键字" class="headerlink" title="为什么使用volatile关键字"></a>为什么使用volatile关键字</h2><blockquote>
<p><img src="R:\Temp\TMP\1584885646653.png" alt="1584885646653"></p>
</blockquote>
<h2 id="volatile还有什么用途"><a href="#volatile还有什么用途" class="headerlink" title="volatile还有什么用途"></a>volatile还有什么用途</h2><blockquote>
<p>volatile可用于限制局部代码指令重排序</p>
</blockquote>
<blockquote>
<p><img src="R:\Temp\TMP\1584885929013.png" alt="1584885805796"></p>
</blockquote>
<h2 id="volatile的使用场景"><a href="#volatile的使用场景" class="headerlink" title="volatile的使用场景"></a>volatile的使用场景</h2><blockquote>
<h3 id="volatile的使用范围"><a href="#volatile的使用范围" class="headerlink" title="volatile的使用范围"></a>volatile的使用范围</h3><blockquote>
<ol>
<li>volatile只可修饰成员变量</li>
<li>多线程并发下，才需要使用到</li>
</ol>
</blockquote>
</blockquote>
<p>​        </p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>高并发</tag>
      </tags>
  </entry>
</search>
